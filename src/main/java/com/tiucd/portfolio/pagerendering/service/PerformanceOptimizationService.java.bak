package com.tiucd.portfolio.pagerendering.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Map;

/**
 * Performance Optimization Service
 * Business logic for performance monitoring and optimization
 * 
 * PRODUCTION MIGRATION NOTES:
 * - Integrate with APM tools (New Relic, AppDynamics, Datadog)
 * - Implement real-time performance alerting
 * - Add performance budgets and SLA monitoring
 * - Consider implementing performance regression detection
 */
@Service
public class PerformanceOptimizationService {
    
    private final JdbcTemplate jdbcTemplate;
    
    @Autowired
    public PerformanceOptimizationService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    
    /**
     * Record page load performance metrics
     * PRODUCTION MIGRATION: Use time-series database (InfluxDB, TimescaleDB) for better performance
     */
    public void recordPageLoad(String pageId, long loadTimeMs, int resourceCount) {
        String sql = "INSERT INTO performance_metrics (page_id, load_time_ms, render_time_ms, " +
                    "resource_count, page_size_kb, user_agent, device_type, recorded_date) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        
        // Simulate additional metrics
        long renderTimeMs = Math.max(loadTimeMs - 200, 0); // Render time is typically less than load time
        int pageSizeKb = estimatePageSize(resourceCount);
        String userAgent = "Demo User Agent"; // In production, get from HTTP request
        String deviceType = "desktop"; // In production, detect from user agent
        
        jdbcTemplate.update(sql, pageId, loadTimeMs, renderTimeMs, resourceCount, 
                           pageSizeKb, userAgent, deviceType, LocalDateTime.now());
    }
    
    /**
     * Get average render time for a page
     * PRODUCTION MIGRATION: Cache frequently accessed metrics
     */
    public long getAverageRenderTime(String pageId) {
        String sql = "SELECT AVG(render_time_ms) FROM performance_metrics WHERE page_id = ? " +
                    "AND recorded_date >= DATEADD('DAY', -7, CURRENT_TIMESTAMP)"; // Last 7 days
        
        try {
            Double avgTime = jdbcTemplate.queryForObject(sql, Double.class, pageId);
            return avgTime != null ? avgTime.longValue() : 1000L; // Default 1 second
        } catch (Exception e) {
            return 1000L; // Default fallback
        }
    }
    
    /**
     * Get resource count for a page
     */
    public int getResourceCount(String pageId) {
        String sql = "SELECT AVG(resource_count) FROM performance_metrics WHERE page_id = ? " +
                    "AND recorded_date >= DATEADD('DAY', -7, CURRENT_TIMESTAMP)";
        
        try {
            Double avgCount = jdbcTemplate.queryForObject(sql, Double.class, pageId);
            return avgCount != null ? avgCount.intValue() : 10; // Default resource count
        } catch (Exception e) {
            return 10; // Default fallback
        }
    }
    
    /**
     * Get performance summary for a page
     * PRODUCTION MIGRATION: Return comprehensive performance metrics
     */
    public Map<String, Object> getPerformanceSummary(String pageId) {
        String sql = "SELECT " +
                    "AVG(load_time_ms) as avg_load_time, " +
                    "AVG(render_time_ms) as avg_render_time, " +
                    "AVG(resource_count) as avg_resource_count, " +
                    "AVG(page_size_kb) as avg_page_size, " +
                    "COUNT(*) as total_requests " +
                    "FROM performance_metrics WHERE page_id = ? " +
                    "AND recorded_date >= DATEADD('DAY', -30, CURRENT_TIMESTAMP)"; // Last 30 days
        
        try {
            return jdbcTemplate.queryForMap(sql, pageId);
        } catch (Exception e) {
            // Return default metrics if no data available
            return Map.of(
                "avg_load_time", 1000L,
                "avg_render_time", 800L,
                "avg_resource_count", 10,
                "avg_page_size", 250,
                "total_requests", 0L
            );
        }
    }
    
    /**
     * Check if page performance meets SLA requirements
     * PRODUCTION MIGRATION: Define configurable SLA thresholds
     */
    public boolean meetsPerformanceSLA(String pageId) {
        long avgLoadTime = getAverageRenderTime(pageId);
        
        // SLA: Page should load within 3 seconds (3000ms)
        // PRODUCTION MIGRATION: Make SLA thresholds configurable
        return avgLoadTime <= 3000;
    }
    
    /**
     * Get performance recommendations for optimization
     * PRODUCTION MIGRATION: Implement ML-based performance recommendations
     */
    public String getPerformanceRecommendations(String pageId) {
        Map<String, Object> summary = getPerformanceSummary(pageId);
        StringBuilder recommendations = new StringBuilder();
        
        double avgLoadTime = ((Number) summary.get("avg_load_time")).doubleValue();
        double avgResourceCount = ((Number) summary.get("avg_resource_count")).doubleValue();
        double avgPageSize = ((Number) summary.get("avg_page_size")).doubleValue();
        
        if (avgLoadTime > 3000) {
            recommendations.append("• Page load time exceeds 3 seconds. Consider optimizing images and reducing resource count.\n");
        }
        
        if (avgResourceCount > 20) {
            recommendations.append("• High resource count detected. Consider bundling CSS/JS files and using sprite images.\n");
        }
        
        if (avgPageSize > 500) {
            recommendations.append("• Large page size detected. Consider image compression and code minification.\n");
        }
        
        if (recommendations.length() == 0) {
            recommendations.append("• Page performance is within acceptable limits. No immediate optimizations needed.");
        }
        
        return recommendations.toString();
    }
    
    /**
     * Get performance trends over time
     * PRODUCTION MIGRATION: Use time-series analysis for trend detection
     */
    public Map<String, Object> getPerformanceTrends(String pageId, int days) {
        String sql = "SELECT " +
                    "DATE(recorded_date) as date, " +
                    "AVG(load_time_ms) as avg_load_time, " +
                    "COUNT(*) as request_count " +
                    "FROM performance_metrics WHERE page_id = ? " +
                    "AND recorded_date >= DATEADD('DAY', ?, CURRENT_TIMESTAMP) " +
                    "GROUP BY DATE(recorded_date) " +
                    "ORDER BY DATE(recorded_date)";
        
        try {
            return Map.of("trends", jdbcTemplate.queryForList(sql, pageId, -days));
        } catch (Exception e) {
            return Map.of("trends", java.util.Collections.emptyList());
        }
    }
    
    /**
     * Estimate page size based on resource count
     * Simple estimation for demo purposes
     */
    private int estimatePageSize(int resourceCount) {
        // Rough estimation: base HTML (50KB) + resources (15KB each)
        return 50 + (resourceCount * 15);
    }
}